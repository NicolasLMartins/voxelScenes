:root {
    --voxel-dims: 160px;
    --voxel-scale: 0.5;
    --voxel: calc(var(--voxel-dims) * var(--voxel-scale));
    --half-voxel: calc(var(--voxel) / 2);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background: #666;
    perspective: 100vmax;
}

div {
    position: absolute;
    width: var(--voxel);
    height: var(--voxel);
    display: flex;
    justify-content: center;
    align-items: center;

    transform:
        rotateX(calc(var(--rx) * 90deg)) rotateY(calc(var(--ry) * 90deg)) rotateZ(calc(var(--rz) * 90deg)) translate3d(calc(var(--tx) * var(--voxel)),
            calc(var(--ty) * var(--voxel)),
            calc(var(--tz) * var(--voxel)));

    transform-style: preserve-3d;
}

.voxel-island {
    width: var(--voxel);
    height: var(--voxel);
    transform: rotateX(-45deg) rotateY(45deg) translateY(calc(var(--ty) * var(--voxel)));
    animation: up-n-down-rotate 5s ease-in-out infinite alternate;
}

@keyframes up-n-down-rotate {
    50% {
        transform: rotateX(-30deg) rotateY(-315deg) translateY(calc(var(--ty) * var(--voxel)));
    }

    100% {
        transform: rotateX(-15deg) rotateY(45deg) translateY(calc(var(--ty) * var(--voxel)));
    }
}

.voxel.grass-block .voxel-side {
    background: url(../img/grass_block_side.png);
    background-size: contain;

    &.top {
        background: url(../img/grass_block_top.png);
        background-size: contain;
    }
}

.voxel.oak-log .voxel-side {
    background: url(../img/oak_log_side.png);
    background-size: contain;

    &.top {
        background: url(../img/oak_log_top.png);
        background-size: contain;
    }
}

.voxel.oak-leaves .voxel-side {
    background: url(../img/oak_leaves.png);
    background-size: contain;
}

.voxel {
    transform:
        rotateX(calc(var(--rx) * 90deg)) rotateY(calc(var(--ry) * 90deg)) rotateZ(calc(var(--rz) * 90deg)) translate3d(calc(var(--tx) * var(--voxel)),
            calc(var(--ty) * var(--voxel)),
            calc(var(--tz) * var(--voxel)));
}

.voxel-side {
    position: inherit;
    width: 100%;
    height: 100%;
    background: linear-gradient(#f00, #00f);
    /* border: 1px solid #f00; */
    /* opacity: 0.2; */
    transform:
        rotateX(calc(90deg * var(--rx))) rotateY(calc(90deg * var(--ry))) rotateZ(calc(90deg * var(--rz))) translate3d(calc(var(--tx) * var(--half-voxel)),
            calc(var(--ty) * var(--half-voxel)),
            calc(var(--tz) * var(--half-voxel)));
}